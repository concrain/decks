buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "javazoom:jlayer:1.0.1"
  }
}

ext.testCount = 0

test {
  afterSuite { TestDescriptor suite, TestResult result ->
    testCount += result.testCount
  }
}

jacocoTestReport.doLast {
  if (testCount > 0) {
    def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
    logger.lifecycle("Checking coverage results: ${report}")

    def parser = new XmlParser()
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    def results = parser.parse(report)

    def percentage = { Node node ->
      def covered = node."@covered" as Double
      def missed = node."@missed" as Double
      ((covered / (covered + missed)) * 100).round(2)
    }

    def counters = ["INSTRUCTION", "BRANCH", "LINE", "COMPLEXITY", "METHOD", "CLASS"]
    def metrics = [:]
    counters.each { counter ->
      def node = results.counter.find {
        it."@type" == counter
      }
      if (node) {
        metrics[counter] = percentage(node)
      }
    }

    def failures = []
    metrics.each {
      if (it.value < 100) {
        failures << "- ${it.key.toLowerCase()} coverage rate is: ${it.value}%"
      }
    }

    if (failures) {
      logger.quiet("------------------ Code Coverage Failed -----------------------")
      failures.each {
        logger.quiet(it)
      }
      logger.quiet("---------------------------------------------------------------")
      def file = new File(rootDir, "gradle/shame.mp3")
      assert file.isFile()
      file.withInputStream { stream ->
        new javazoom.jl.player.Player(stream).play()
      }
      throw new GradleException("Code coverage failed")
    } else {
      logger.quiet("Passed Code Coverage Checks")
    }
  }
}
