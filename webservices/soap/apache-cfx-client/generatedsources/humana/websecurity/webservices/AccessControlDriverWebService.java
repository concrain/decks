package humana.websecurity.webservices;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This web service provides various methods to obtain current access control information. Access control information can be obtained at any of four levels. Level 1 is user specific or organization specific information. Level 2 provides user information and the organization(s) that user is associated with. Level 3 provides Level 2 information and adds the functions each organization has granted to that user. Level 4 provides all the level 3 information and adds the data (Access Identifiers) that can be accessed through each function. A common term for describing this overall category is an Access Control List (ACL).
 *
 * This class was generated by Apache CXF 3.0.4
 * 2015-07-29T16:59:43.902-07:00
 * Generated source version: 3.0.4
 * 
 */
@WebServiceClient(name = "AccessControlDriverWebService", 
                  wsdlLocation = "classpath:wsdl/slwebservices.wsdl",
                  targetNamespace = "urn:Humana:WebSecurity:WebServices") 
public class AccessControlDriverWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:Humana:WebSecurity:WebServices", "AccessControlDriverWebService");
    public final static QName AccessControlDriverWebServiceHttpPost = new QName("urn:Humana:WebSecurity:WebServices", "AccessControlDriverWebServiceHttpPost");
    public final static QName AccessControlDriverWebServiceSoap = new QName("urn:Humana:WebSecurity:WebServices", "AccessControlDriverWebServiceSoap");
    public final static QName AccessControlDriverWebServiceSoap12 = new QName("urn:Humana:WebSecurity:WebServices", "AccessControlDriverWebServiceSoap12");
    public final static QName AccessControlDriverWebServiceHttpGet = new QName("urn:Humana:WebSecurity:WebServices", "AccessControlDriverWebServiceHttpGet");
    static {
        URL url = AccessControlDriverWebService.class.getClassLoader().getResource("wsdl/slwebservices.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(AccessControlDriverWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/slwebservices.wsdl");
        }       
        WSDL_LOCATION = url;   
    }

    public AccessControlDriverWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AccessControlDriverWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AccessControlDriverWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessControlDriverWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessControlDriverWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessControlDriverWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns AccessControlDriverWebServiceHttpPost
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceHttpPost")
    public AccessControlDriverWebServiceHttpPost getAccessControlDriverWebServiceHttpPost() {
        return super.getPort(AccessControlDriverWebServiceHttpPost, AccessControlDriverWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccessControlDriverWebServiceHttpPost
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceHttpPost")
    public AccessControlDriverWebServiceHttpPost getAccessControlDriverWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(AccessControlDriverWebServiceHttpPost, AccessControlDriverWebServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns AccessControlDriverWebServiceSoap
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceSoap")
    public AccessControlDriverWebServiceSoap getAccessControlDriverWebServiceSoap() {
        return super.getPort(AccessControlDriverWebServiceSoap, AccessControlDriverWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccessControlDriverWebServiceSoap
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceSoap")
    public AccessControlDriverWebServiceSoap getAccessControlDriverWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(AccessControlDriverWebServiceSoap, AccessControlDriverWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns AccessControlDriverWebServiceSoap
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceSoap12")
    public AccessControlDriverWebServiceSoap getAccessControlDriverWebServiceSoap12() {
        return super.getPort(AccessControlDriverWebServiceSoap12, AccessControlDriverWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccessControlDriverWebServiceSoap
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceSoap12")
    public AccessControlDriverWebServiceSoap getAccessControlDriverWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(AccessControlDriverWebServiceSoap12, AccessControlDriverWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns AccessControlDriverWebServiceHttpGet
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceHttpGet")
    public AccessControlDriverWebServiceHttpGet getAccessControlDriverWebServiceHttpGet() {
        return super.getPort(AccessControlDriverWebServiceHttpGet, AccessControlDriverWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccessControlDriverWebServiceHttpGet
     */
    @WebEndpoint(name = "AccessControlDriverWebServiceHttpGet")
    public AccessControlDriverWebServiceHttpGet getAccessControlDriverWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(AccessControlDriverWebServiceHttpGet, AccessControlDriverWebServiceHttpGet.class, features);
    }

}
